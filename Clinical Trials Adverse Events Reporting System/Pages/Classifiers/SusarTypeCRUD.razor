@page "/SusarType/{Action}"
@page "/SusarType/{Action}/{Id}"

@using Clinical_Trials_Adverse_Events_Reporting_System.Data
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities
@using Clinical_Trials_Adverse_Events_Reporting_System.ReusableComponents

@inject IClassifierRepository<SusarType> classifierRepository
@inject NavigationManager NavigationManager

@if (Action != "Delete")
{
<EditForm Model="@classifier" OnValidSubmit="@OnValidSubmit" @onreset="@Cancel">

    <DataAnnotationsValidator />

    <CustomInputText @bind-Value="@classifier.Name" Label="Name"></CustomInputText>

    @if (Action == "Edit")
    {
        <CustomInputText @bind-Value="@classifier.ModifyReason" Label="Modify Reason"></CustomInputText>
        <ButtonComponent buttonStyle="primary" buttonText="Update" buttonType="submit"></ButtonComponent>
    }
    @if (Action == "Create")
    {
        <ButtonComponent buttonStyle="primary" buttonText="Create" buttonType="submit"></ButtonComponent>
    }
    <ButtonComponent buttonStyle="danger" buttonText="Cancel" buttonType="reset"></ButtonComponent>

</EditForm>
}



@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string Id { get; set; }

    SusarType classifier = new SusarType();


    protected override async Task OnInitializedAsync()
    {
        if (Action == "Edit" || Action == "Delete")
        {
            classifier = await Task.Run(() => classifierRepository.GetById(Convert.ToInt32(Id)));
        }
        if (Action == "Delete")
        {
            DeleteClassifier();
        }
    }

    protected async void UpdateClassifier()
    {
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Update(classifier);
        NavigationManager.NavigateTo("Classifiers/SusarType/Index");
    }

    protected async void CreateClassifier()
    {
        classifier.Created = DateTime.UtcNow;
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Create(classifier);
        NavigationManager.NavigateTo("Classifiers/SusarType/Index");
    }

    protected async void DeleteClassifier()
    {
        await classifierRepository.Delete(classifier);
        NavigationManager.NavigateTo("Classifiers/SusarType/Index");
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("Classifiers/SusarType/Index");
    }

    private void OnValidSubmit()
    {
        if (Action == "Create") CreateClassifier();
        if (Action == "Edit") UpdateClassifier();
    }

}

