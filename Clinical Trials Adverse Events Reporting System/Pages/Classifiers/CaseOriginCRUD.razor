@page "/CaseOrigin/{Action}"
@page "/CaseOrigin/{Action}/{Id}"


@inject IClassifierRepository<CaseOrigin> classifierRepository
@inject NavigationManager NavigationManager

@attribute [Authorize(Policy = "SystemAuthorization", Roles = "Administrator")]


@if (showErrorDialog)
{
    <ErrorMessage Text="Classifier is in use" Title="Error message" OnClose="@OnErrorDialogClose"></ErrorMessage>
}

@if (Action != "Delete" && editContext != null)
{
<EditForm EditContext="@editContext" OnSubmit="@OnValidSubmit" @onreset="@Cancel">

    <DataAnnotationsValidator />

    <ValidationSummary />
    <CustomValidationBase @ref="customValidationBase" />

    <CustomInputText @bind-Value="@classifier.Name" Label="Name"></CustomInputText>

    @if (Action == "Edit")
    {
        <CustomInputText @bind-Value="@classifier.ModifyReason" Label="Modify Reason"></CustomInputText>

        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Update</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>

    }
    @if (Action == "Create")
    {
        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Create</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>
    }

</EditForm>
}



@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string Id { get; set; }
    [Inject]
    IValidator<CaseOrigin> ClassifierValidator { get; set; }
    private bool showErrorDialog;

    CaseOrigin classifier = new CaseOrigin();

    private CustomValidationBase customValidationBase;
    private EditContext editContext;

    protected override async Task OnInitializedAsync()
    {
        if (Action == "Edit" || Action == "Delete")
        {
            classifier = await Task.Run(() => classifierRepository.GetById(Convert.ToInt32(Id)));
        }
        if (Action == "Delete")
        {
            DeleteClassifier();
        }
        editContext = new EditContext(classifier);
    }

    protected async void UpdateClassifier()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!ClassifierValidator.Validate(classifier))
        {
            errors.Add(nameof(classifier.Name),
                new List<string>() { "Classifier name field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await classifierRepository.Update(classifier);
            NavigationManager.NavigateTo("Classifiers/CaseOrigin/Index");
        }
    }

    protected async void CreateClassifier()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!ClassifierValidator.Validate(classifier))
        {
            errors.Add(nameof(classifier.Name),
                new List<string>() { "Classifier name field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await classifierRepository.Create(classifier);
            NavigationManager.NavigateTo("Classifiers/CaseOrigin/Index");
        }
    }

    protected async void DeleteClassifier()
    {
        UnitOfWork unitOfWork = new UnitOfWork(classifierRepository.GetDbContext());
        try
        {
            await unitOfWork.BeginTransactionAsync();

            await classifierRepository.Delete(classifier);

            await unitOfWork.CommitAsync();
            await unitOfWork.CloseTransactionAsync();

            NavigationManager.NavigateTo("Classifiers/CaseOrigin/Index");
        }
        catch
        {
            await unitOfWork.RollbackAsync();
            await unitOfWork.CloseTransactionAsync();

            showErrorDialog = true;
            StateHasChanged();
        }
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("Classifiers/CaseOrigin/Index");
    }

    private void OnValidSubmit()
    {
        if (Action == "Create") CreateClassifier();
        if (Action == "Edit") UpdateClassifier();
    }

    private void OnErrorDialogClose(bool accepted)
    {
        if (accepted)
        {
            NavigationManager.NavigateTo("Classifiers/CaseOrigin/Index");
        }
        showErrorDialog = false;
        StateHasChanged();
    }
}

