@page "/InvestigationalProductType/{Action}"
@page "/InvestigationalProductType/{Action}/{Id}"

@inject IClassifierRepository<InvestigationalProductType> classifierRepository
@inject NavigationManager NavigationManager

@if (Action != "Delete")
{
    <EditForm Model="@classifier" OnValidSubmit="@OnValidSubmit" @onreset="@Cancel">

        <DataAnnotationsValidator />

        <CustomInputText @bind-Value="@classifier.Name" Label="Name"></CustomInputText>

        @if (Action == "Edit")
        {
            <CustomInputText @bind-Value="@classifier.ModifyReason" Label="Modify Reason"></CustomInputText>
            <ButtonComponent buttonStyle="primary" buttonText="Update" buttonType="submit"></ButtonComponent>
        }
        @if (Action == "Create")
        {
            <ButtonComponent buttonStyle="primary" buttonText="Create" buttonType="submit"></ButtonComponent>
        }
        <ButtonComponent buttonStyle="danger" buttonText="Cancel" buttonType="reset"></ButtonComponent>

    </EditForm>
}


@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string Id { get; set; }

    InvestigationalProductType classifier = new InvestigationalProductType();


    protected override async Task OnInitializedAsync()
    {
        if (Action == "Edit" || Action == "Delete")
        {
            classifier = await Task.Run(() => classifierRepository.GetById(Convert.ToInt32(Id)));
        }
        if (Action == "Delete")
        {
            DeleteClassifier();
        }
    }

    protected async void UpdateClassifier()
    {
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Update(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }

    protected async void CreateClassifier()
    {
        classifier.Created = DateTime.UtcNow;
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Create(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }

    protected async void DeleteClassifier()
    {
        await classifierRepository.Delete(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }

    private void OnValidSubmit()
    {
        if (Action == "Create") CreateClassifier();
        if (Action == "Edit") UpdateClassifier();
    }

}

