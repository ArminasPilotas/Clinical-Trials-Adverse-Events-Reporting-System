@page "/InvestigationalProductType/{Action}"
@page "/InvestigationalProductType/{Action}/{Id}"

@using Clinical_Trials_Adverse_Events_Reporting_System.Data
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities
@using Clinical_Trials_Adverse_Events_Reporting_System.ReusableComponents

@inject IClassifierRepository<InvestigationalProductType> classifierRepository
@inject NavigationManager NavigationManager

<ClassifierCRUD Classifier="@classifier" Action="@Action" @bind-Name="@classifier.Name" @bind-ModifyReason="@classifier.ModifyReason"
                OnCreateClick="CreateClassifier" OnEditClick="UpdateClassifier" OnDeleteClick="DeleteClassifier"></ClassifierCRUD>


@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string Id { get; set; }

    InvestigationalProductType classifier = new InvestigationalProductType();


    protected override async Task OnInitializedAsync()
    {
        if (Action == "Edit" || Action == "Delete")
        {
            classifier = await Task.Run(() => classifierRepository.GetById(Convert.ToInt32(Id)));
        }
        if (Action == "Delete")
        {
            DeleteClassifier();
        }
    }

    protected async void UpdateClassifier()
    {
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Update(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }

    protected async void CreateClassifier()
    {
        classifier.Created = DateTime.UtcNow;
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Create(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }

    protected async void DeleteClassifier()
    {
        await classifierRepository.Delete(classifier);
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("Classifiers/InvestigationalProductType/Index");
    }
}

