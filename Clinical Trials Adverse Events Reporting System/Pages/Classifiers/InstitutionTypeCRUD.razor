@page "/InstitutionType/{Action}"
@page "/InstitutionType/{Action}/{Id}"

@using Clinical_Trials_Adverse_Events_Reporting_System.Data
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities

@inject IClassifierRepository<InstitutionType> classifierRepository
@inject NavigationManager NavigationManager

@if (Action != "Delete")
{
    <form>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input type="text" class="form-control" @bind="classifier.Name" />
            </div>
        </div>

        @if (Action == "Edit")
        {
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Modify Reason</label>
                <div class="col-sm-10">
                    <input type="text" class="form-control" @bind="classifier.ModifyReason" />
                </div>
            </div>
        }
        <label></label>

        @if (Action == "Edit")
        {
            <div class="col-md-12 text-center">
                <button type="button" class="btn btn-primary btn-lg btn-block" @onclick="UpdateClassifier">Update</button>
            </div>
        }
        @if (Action == "Create")
        {
            <div class="col-md-12 text-center">
                <button type="button" class="btn btn-primary btn-lg btn-block" @onclick="CreateClassifier">Create</button>
            </div>
        }

        <div class="col-md-12 text-center">
            <button type="button" class="btn btn-danger btn-lg btn-block" @onclick="Cancel">Cancel</button>
        </div>

    </form>
}


@code {
    [Parameter]
    public string Action { get; set; }
    [Parameter]
    public string Id { get; set; }

    InstitutionType classifier = new InstitutionType();


    protected override async Task OnInitializedAsync()
    {
        if (Action == "Edit" || Action == "Delete")
        {
            classifier = await Task.Run(() => classifierRepository.GetById(Convert.ToInt32(Id)));
        }
        if (Action == "Delete")
        {
            DeleteClassifier();
        }
    }

    protected async void UpdateClassifier()
    {
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Update(classifier);
        NavigationManager.NavigateTo("Classifiers/InstitutionType/Index");
    }

    protected async void CreateClassifier()
    {
        classifier.Created = DateTime.UtcNow;
        classifier.Modified = DateTime.UtcNow;
        await classifierRepository.Create(classifier);
        NavigationManager.NavigateTo("Classifiers/InstitutionType/Index");
    }

    protected async void DeleteClassifier()
    {
        await classifierRepository.Delete(classifier);
        NavigationManager.NavigateTo("Classifiers/InstitutionType/Index");
    }


    private void Cancel()
    {
        NavigationManager.NavigateTo("Classifiers/InstitutionType/Index");
    }
}

