@page "/AdverseEvent/Add";

@if (editContext != null)
{
<EditForm EditContext="@editContext" OnSubmit="@CreateAdverseEvent" @onreset="@Cancel">
    <DataAnnotationsValidator />

    <ValidationSummary />
    <CustomValidationBase @ref="customValidationBase" />

    <CustomInputSelect @bind-value="@IPTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

    <CustomInputText @bind-Value="@adverseEvent.StudyNo" Label="Study number"></CustomInputText>

    <CustomInputText @bind-Value="@adverseEvent.Description" Label="Description"></CustomInputText>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Occurred On</label>
        <div class="col-sm-10">
            <SfDatePicker TValue="DateTime" @bind-Value="@adverseEvent.OccurredOn" Max="DateTime.Now" Min="DateTime.Now.AddYears(-10)" Placeholder="Select a date" AllowEdit="false">
                <DatePickerEvents TValue="DateTime" ValueChange="@OccurredOnChanged"></DatePickerEvents>
            </SfDatePicker>
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Attachment</label>
        <div class="col-sm-10">

        </div>
    </div>

    <div id="container">
        <button id="button1" class="btn btn-primary" type="submit">Create</button>
        <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
    </div>

</EditForm>
}
@code {
    public AdverseEvent adverseEvent;
    [Inject]
    IClassifierRepository<InvestigationalProductType> investigationalProductTypeRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    IAdverseEventRepository AdverseEventRepository { get; set; }
    [Inject]
    IValidator<AdverseEvent> AdverseEventValidator { get; set; }

    public List<InvestigationalProductType> investigationalProductTypes;
    private CustomValidationBase customValidationBase;
    private EditContext editContext;

    public int IPTypeId
    {
        get
        {
            if (adverseEvent.InvestigationalProductType != null)
            {
                return adverseEvent.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => adverseEvent.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }


    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => investigationalProductTypeRepository.GetAll());
        adverseEvent = new AdverseEvent();
        editContext = new EditContext(adverseEvent);
    }

    private void OccurredOnChanged(ChangedEventArgs<DateTime> args)
    {
        adverseEvent.OccurredOn = args.Value;
    }

    protected async void CreateAdverseEvent()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!AdverseEventValidator.Validate(adverseEvent))
        {
            errors.Add(nameof(adverseEvent.StudyNo),
                new List<string>() { "Study number field must be unique" });

            errors.Add(nameof(adverseEvent.OccurredOn),
                new List<string>() { "Occurred on date must be unique" });

            errors.Add(nameof(adverseEvent.InvestigationalProductType),
                new List<string>() { "Investigational product type field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await AdverseEventRepository.Create(adverseEvent);
            NavigationManager.NavigateTo("/AdverseEvents/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/AdverseEvents/Index");
    }
}
