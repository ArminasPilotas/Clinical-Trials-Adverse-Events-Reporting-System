@page "/AdverseEvent/Add";

@if (editContext != null)
{
<EditForm EditContext="@editContext" OnSubmit="@CreateAdverseEvent" @onreset="@Cancel">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <CustomInputSelect @bind-value="@IPTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

    <CustomInputText @bind-Value="@adverseEvent.StudyNo" Label="Study number"></CustomInputText>

    <CustomInputText @bind-Value="@adverseEvent.Description" Label="Description"></CustomInputText>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Occurred On</label>
        <div class="col-sm-10">
            <SfDatePicker TValue="DateTime" @bind-Value="@adverseEvent.OccurredOn" Max="DateTime.Now" Min="DateTime.Now.AddYears(-10)" Placeholder="Select a date" AllowEdit="false">
                <DatePickerEvents TValue="DateTime" ValueChange="@OccurredOnChanged"></DatePickerEvents>
            </SfDatePicker>
        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Attachment</label>
        <div class="col-sm-10">

        </div>
    </div>

    <ButtonComponent buttonText="Create" buttonType="submit" buttonStyle="primary"></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger"></ButtonComponent>

</EditForm>
}
@code {
    public AdverseEvent adverseEvent;
    [Inject]
    IClassifierRepository<InvestigationalProductType> investigationalProductTypeRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    AdverseEventRepository AdverseEventRepository { get; set; }
    public List<InvestigationalProductType> investigationalProductTypes;
    private EditContext editContext;

    public int IPTypeId
    {
        get
        {
            if (adverseEvent.InvestigationalProductType != null)
            {
                return adverseEvent.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => adverseEvent.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }


    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => investigationalProductTypeRepository.GetAll());
        adverseEvent = new AdverseEvent();
        editContext = new EditContext(adverseEvent);
    }

    private void OccurredOnChanged(ChangedEventArgs<DateTime> args)
    {
        adverseEvent.OccurredOn = args.Value;
    }

    protected async void CreateAdverseEvent()
    {
        await AdverseEventRepository.Create(adverseEvent);
        NavigationManager.NavigateTo("/AdverseEvents/Index");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/AdverseEvents/Index");
    }
}
