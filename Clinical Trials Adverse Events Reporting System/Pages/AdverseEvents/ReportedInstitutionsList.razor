@page "/AdverseEvent/{AdverseEventId}/ReportedInstitutions"

@if (reportedInstitutions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Country</th>
                <th scope="col">Institution</th>
                <th scope="col">Institution Type</th>
                <th scope="col">Institution Address</th>
                <th scope="col">Institution Email</th>
                <th scope="col">Report By</th>
                <th scope="col">Reported On</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var reportedInstitution in reportedInstitutions)
            {
                <tr>
                    @if (reportedInstitution.ReportedOn == DateTime.MinValue)
                    {
                        <td><input type="checkbox" @onchange="args => CheckboxClicked(reportedInstitution.Id, args.Value)" /></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    <td>@reportedInstitution.Institution.Country.Name</td>
                    <td>@reportedInstitution.Institution.Name</td>
                    <td>@reportedInstitution.Institution.InstitutionType.Name</td>
                    <td>@reportedInstitution.Institution.Address</td>
                    <td>@reportedInstitution.Institution.Email</td>
                    <td>@reportedInstitution.ReportBy.ToShortDateString()</td>
                    @if (reportedInstitution.ReportedOn != DateTime.MinValue)
                    {
                        <td>@reportedInstitution.ReportedOn.ToShortDateString()</td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div id="container">
        <button id="button1" class="btn btn-primary" @onclick="() => OpenForceReportDialog()">Force Report</button>
        <button id="button2" class="btn btn-primary" @onclick="() => OpenReportByEmailDialog()">Report By Sending Email</button>
    </div>

    @if (ForceReportDialogOpen)
    {
    <ModalDialog
                 Title="Are you sure?"
                 Text="Do you want force report adverse event to institutions?"
                 OnClose="@OnForceReportDialogClose">
        
    </ModalDialog>
     }
    @if (ReportByEmailDialogOpen) { 
        <ModalDialog
                     Title="Are you sure?"
                     Text="Do you want report adverse event by email to institutions?"
                     OnClose="@OnReportByEmailDialogClose">
        </ModalDialog>
         }


    }
@code {
    [Parameter]
    public string AdverseEventId { get; set; }
    [Inject]
    IReportedInstitutionRepository ReportedInstitutionRepository { get; set; }
    private List<int> CheckedValues { get; set; }
    private bool ParentCheckboxClick { get; set; }
    //private Mailer mailer;
    public bool ForceReportDialogOpen { get; set; }
    public bool ReportByEmailDialogOpen { get; set; }

    List<ReportedInstitution> reportedInstitutions;

    protected override async Task OnInitializedAsync()
    {
        reportedInstitutions = await Task.Run(() => ReportedInstitutionRepository.GetByAdverseEvent(Convert.ToInt32(AdverseEventId)));
        CheckedValues = new List<int>();
        // mailer = new Mailer();
    }

    private void CheckboxClicked(int Id, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            if (!CheckedValues.Contains(Id))
            {
                CheckedValues.Add(Id);
            }
        }
        else
        {
            if (CheckedValues.Contains(Id))
            {
                CheckedValues.Remove(Id);
            }
        }
    }

    private async Task OnForceReportDialogClose(bool accepted)
    {
        if (accepted)
        {
            foreach (var checkedBoxes in CheckedValues)
            {
                await Task.Run(() => ReportedInstitutionRepository.Update(reportedInstitutions.FirstOrDefault(c => c.Id == checkedBoxes)));
            }
            CheckedValues.Clear();
        }
        ForceReportDialogOpen = false;
        StateHasChanged();
    }

    private void OpenForceReportDialog()
    {
        ForceReportDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnReportByEmailDialogClose(bool accepted)
    {
        if (accepted)
        {
            foreach (var checkedBoxes in CheckedValues)
            {
                await Task.Run(() => ReportedInstitutionRepository.Update(reportedInstitutions.FirstOrDefault(c => c.Id == checkedBoxes)));
            }
            //mailer.SendEmail("arminas.pilotas@gmail.com", "Arminas", "AdverseEventTEST", "NO");
            CheckedValues.Clear();
        }
        ReportByEmailDialogOpen = false;
        StateHasChanged();
    }

    private void OpenReportByEmailDialog()
    {
        ReportByEmailDialogOpen = true;
        StateHasChanged();
    }
}
