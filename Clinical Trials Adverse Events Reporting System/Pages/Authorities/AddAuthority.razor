@page "/{Country}/Authority/Add"

@using Clinical_Trials_Adverse_Events_Reporting_System.Data
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities 
@using Clinical_Trials_Adverse_Events_Reporting_System.ReusableComponents

<EditForm Model="@authority" OnValidSubmit="@CreateAuthority" @onreset="@Cancel">
    <DataAnnotationsValidator />

    <CustomInputSelect @bind-value="@institutionId" labelName="Institution Name" items="@institutions"></CustomInputSelect>

    <CustomInputSelect @bind-value="@IPTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

    <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

    <ButtonComponent buttonText="Create" buttonType="sumbmit" buttonStyle="primary" ></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger" ></ButtonComponent>

    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
    //TODO ADD VALIDATION ON INSTITUTION THAT IPTYPE AND INSTITUTIONTYPE CAN'T BE THE SAME
    [Parameter]
    public string Country { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    AuthorityRepository authorityRepository { get; set; }
    [Inject]
    CountryRepository countryRepository { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
    [Inject]
    InstitutionRepository institutionRepository { get; set; }

    Authority authority = new Authority();

    List<InvestigationalProductType> investigationalProductTypes { get; set; }
    List<InstitutionType> institutionTypes { get; set; }
    List<Institution> institutions { get; set; }

    public int institutionId { get; set; }
    public int IPTypeId { get; set; }
    public int InstitutionTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        institutions = await Task.Run(() => institutionRepository.GetByCountry(Country));
    }

    protected async void CreateAuthority()
    {
        authority.Country = await countryRepository.GetByName(Country);
        authority.Institution = await institutionRepository.GetById(institutionId);
        authority.InstitutionType = await institutionTypeRepository.GetById(InstitutionTypeId);
        authority.InvestigationalProductType = await IPTypeRepository.GetById(IPTypeId);
        await authorityRepository.Create(authority);
        NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
    }
}
