@page "/{Country}/Authority/Add"

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnSubmit="@CreateAuthority" @onreset="@Cancel">
        <DataAnnotationsValidator />

        <ValidationSummary />
        <CustomValidationBase @ref="customValidationBase" />

        <CustomInputSelect @bind-value="@InstitutionId" labelName="Institution Name" items="@institutions"></CustomInputSelect>

        <CustomInputSelect @bind-value="@IPTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

        <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Create</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>
    </EditForm>
}
    @code {
        [Parameter]
        public string Country { get; set; }
        [Inject]
        NavigationManager NavigationManager { get; set; }
        [Inject]
        IAuthorityRepository authorityRepository { get; set; }
        [Inject]
        ICountryRepository countryRepository { get; set; }
        [Inject]
        IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
        [Inject]
        IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
        [Inject]
        IInstitutionRepository institutionRepository { get; set; }
        [Inject]
        IValidator<Authority> AuthorityValidator { get; set; }


        Authority authority = new Authority();

private CustomValidationBase customValidationBase;
    private EditContext editContext;

    List<InvestigationalProductType> investigationalProductTypes { get; set; }
    List<InstitutionType> institutionTypes { get; set; }
    List<Institution> institutions { get; set; }

    public int InstitutionId
    {
        get
        {
            if (authority.Institution != null)
            {
                return authority.Institution.Id;
            }
            return 0;
        }
        set => authority.Institution = institutions.Single(c => c.Id == value);
    }
    public int IPTypeId
    {
        get
        {
            if (authority.InvestigationalProductType != null)
            {
                return authority.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => authority.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }
    public int InstitutionTypeId
    {
        get
        {
            if (authority.InstitutionType != null)
            {
                return authority.InstitutionType.Id;
            }
            return 0;
        }
        set => authority.InstitutionType = institutionTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        institutions = await Task.Run(() => institutionRepository.GetByCountry(Country));
        authority.Country = await Task.Run(() => countryRepository.GetByName(Country));
        editContext = new EditContext(authority);
    }

    protected async void CreateAuthority()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!AuthorityValidator.Validate(authority))
        {
            errors.Add(nameof(authority.Institution),
                new List<string>() { "Institution field must be unique" });

            errors.Add(nameof(authority.InstitutionType),
               new List<string>() { "Institution type field must be unique" });

            errors.Add(nameof(authority.InvestigationalProductType),
               new List<string>() { "Investigational product type field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await authorityRepository.Create(authority);
            NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
    }
    }
