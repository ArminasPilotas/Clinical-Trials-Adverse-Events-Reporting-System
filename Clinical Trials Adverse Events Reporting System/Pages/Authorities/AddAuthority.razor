@page "/{Country}/Authority/Add"


<EditForm Model="@authority" OnValidSubmit="@CreateAuthority" @onreset="@Cancel"> <!--TODO ON SUBMIT-->
    <DataAnnotationsValidator />

    <CustomInputSelect @bind-value="@InstitutionId" labelName="Institution Name" items="@institutions"></CustomInputSelect>

    <CustomInputSelect @bind-value="@IPTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

    <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

    <ButtonComponent buttonText="Create" buttonType="sumbmit" buttonStyle="primary" ></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger" ></ButtonComponent>

    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
    //TODO ADD VALIDATION ON INSTITUTION THAT IPTYPE AND INSTITUTIONTYPE CAN'T BE THE SAME
    [Parameter]
    public string Country { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    AuthorityRepository authorityRepository { get; set; }
    [Inject]
    CountryRepository countryRepository { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
    [Inject]
    InstitutionRepository institutionRepository { get; set; }
    [Inject]
    IValidator<Authority> authorityValidator { get; set; }


    Authority authority = new Authority();

    List<InvestigationalProductType> investigationalProductTypes { get; set; }
    List<InstitutionType> institutionTypes { get; set; }
    List<Institution> institutions { get; set; }

    public int InstitutionId
    {
        get
        {
            if(authority.Institution != null)
            {
                return authority.Institution.Id;
            }
            return 0;
        }
        set => authority.Institution = institutions.Single(c => c.Id == value);
    }
    public int IPTypeId
    {
        get
        {
            if (authority.InvestigationalProductType != null)
            {
                return authority.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => authority.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }
    public int InstitutionTypeId
    {
        get
        {
            if (authority.InstitutionType != null)
            {
                return authority.InstitutionType.Id;
            }
            return 0;
        }
        set => authority.InstitutionType = institutionTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        institutions = await Task.Run(() => institutionRepository.GetByCountry(Country));
        authority.Country = await Task.Run(() => countryRepository.GetByName(Country));
    }

    protected async void CreateAuthority()
    {
        if (authorityValidator.Validate(authority))
        {
            await authorityRepository.Create(authority);
            NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"/{Country}/Authorities/Index");
    }
}
