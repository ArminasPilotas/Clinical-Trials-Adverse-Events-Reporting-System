@page "/{Country}/Authority/Edit/{Id}"

@using Clinical_Trials_Adverse_Events_Reporting_System.Data
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities
@using Clinical_Trials_Adverse_Events_Reporting_System.ReusableComponents

@if (authority is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@authority" OnValidSubmit="@UpdateAuthority" @onreset="@Cancel">
    <DataAnnotationsValidator />

    <CustomInputSelect @bind-value="@InstitutionId" labelName="Institution Name" items="@institutions"></CustomInputSelect>

    <CustomInputSelect @bind-value="@IpTypeId" labelName="Investigational Product Type" items="@investigationalProductTypes"></CustomInputSelect>

    <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

    <ButtonComponent buttonText="Create" buttonType="sumbmit" buttonStyle="primary"></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger"></ButtonComponent>

    <ValidationSummary></ValidationSummary>

</EditForm>
    }

@code {
    //TODO ADD VALIDATION ON INSTITUTION THAT IPTYPE AND INSTITUTIONTYPE CAN'T BE THE SAME
    [Parameter]
    public string Country { get; set; }
    [Parameter]
    public string Id { get; set; }
    [Inject]
    AuthorityRepository authorityRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
    [Inject]
    InstitutionRepository institutionRepository { get; set; }

    public List<Institution> institutions { get; set; }
    public List<InvestigationalProductType> investigationalProductTypes { get; set; }
    public List<InstitutionType> institutionTypes { get; set; }

    public int InstitutionId { get; set; }
    public int IpTypeId { get; set; }
    public int InstitutionTypeId { get; set; }

    public Authority authority { get; set; }

    protected override async Task OnInitializedAsync()
    {
        authority = await Task.Run(() => authorityRepository.GetById(Convert.ToInt32(Id)));
        institutions = await Task.Run(() => institutionRepository.GetByCountry(Country));
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        InstitutionId = authority.Institution.Id;
        IpTypeId = authority.InvestigationalProductType.Id;
        InstitutionTypeId = authority.InstitutionType.Id;
    }

    protected async void UpdateAuthority() //TODO END THIS METHOD
    {

        NavigationManager.NavigateTo($"{Country}/Authorities/Index");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/Authorities/Index");
    }
}
