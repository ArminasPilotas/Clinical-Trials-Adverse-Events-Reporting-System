@page "/{Country}/Institution/Add"

@attribute [Authorize(Policy = "SystemAuthorization", Roles = "ContactManager")]

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnSubmit="@AddInstitution" @onreset="@Cancel">
        <DataAnnotationsValidator />

        <ValidationSummary />
        <CustomValidationBase @ref="customValidationBase" />

        <CustomInputText @bind-Value="@institution.Name" Label="Institution Name"> </CustomInputText>

        <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

        <CustomInputText @bind-Value="@institution.Address" Label="Address"></CustomInputText>

        <CustomInputText @bind-Value="@institution.Phone" Label="Phone"></CustomInputText>

        <CustomInputText @bind-Value="@institution.Fax" Label="Fax"></CustomInputText>

        <CustomInputText @bind-Value="@institution.Email" Label="Email"></CustomInputText>

        <CustomInputText @bind-Value="@institution.AlternateAddress" Label="Alternate Address"></CustomInputText>

        <CustomInputText @bind-Value="@institution.AlternatePhone" Label="Alternate Phone"></CustomInputText>

        <CustomInputText @bind-Value="@institution.AlternateFax" Label="Alternate Fax"></CustomInputText>

        <CustomInputText @bind-Value="@institution.AlternateEmail" Label="Alternate Email"></CustomInputText>

        <CustomInputText @bind-Value="@institution.City" Label="City"></CustomInputText>

        <CustomInputText @bind-Value="@institution.RegNo" Label="Registration Number"></CustomInputText>

        <CustomInputText @bind-Value="@institution.StudyNumber" Label="Study Number"></CustomInputText>

        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Create</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public string Country { get; set; }

    [Inject]
    IInstitutionRepository institutionRepository { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> investigationalProductTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
    [Inject]
    ICountryRepository countryRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }

    public Institution institution = new Institution();
    public List<InstitutionType> institutionTypes { get; set; }
    public List<Country> countries { get; set; }

    [Inject]
    IValidator<Institution> InstitutionValidator { get; set; }
    private CustomValidationBase customValidationBase;
    private EditContext editContext;

    public int InstitutionTypeId
    {
        get
        {
            if (institution.InstitutionType != null)
            {
                return institution.InstitutionType.Id;
            }
            return 0;
        }
        set => institution.InstitutionType = institutionTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        countries = await Task.Run(() => countryRepository.GetAll());
        institution.Country = countries.Where(c => c.Name == Country).SingleOrDefault();
        editContext = new EditContext(institution);
    }

    protected async void AddInstitution()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!InstitutionValidator.Validate(institution))
        {
            errors.Add(nameof(institution.Name),
                new List<string>() { "Institution Name field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await institutionRepository.Create(institution);
            NavigationManager.NavigateTo($"{Country}/Institution/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/Institution/Index");
    }
}
