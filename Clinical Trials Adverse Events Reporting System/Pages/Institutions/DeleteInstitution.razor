@page "/{Country}/Institution/Delete/{Id}"

@attribute [Authorize(Policy = "SystemAuthorization", Roles = "ContactManager")]

@if (institution is null)
{
    <p><em>Loading...</em></p>
}

else
{
    <EditForm Model="@institution" OnSubmit="@DeleteInstitutions" @onreset="@Cancel">

        <InputComponent @bind-inputName="@institution.Name" labelName="Institution Name" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.InstitutionType.Name" labelName="Institution Type" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.Address" labelName="Address" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.Phone" labelName="Phone" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.Fax" labelName="Fax" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.Email" labelName="Email" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.AlternateAddress" labelName="Alternate Address" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.AlternatePhone" labelName="Alternate Phone" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.AlternateFax" labelName="Alternate Fax" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.AlternateEmail" labelName="Alternate Email" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.City" labelName="City" readOnly="true"></InputComponent>

        <InputComponent @bind-inputName="@institution.RegNo" labelName="Registration Number" readOnly="true"></InputComponent>

        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Delete</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>
    </EditForm>

    @if (showErrorDialog)
    {
        <ErrorMessage Text="Institution is in use" Title="Error message" OnClose="@OnErrorDialogClose"></ErrorMessage>
    }

}


@code {
    [Parameter]
    public string Country { get; set; }
    [Parameter]
    public string Id { get; set; }

    [Inject]
    IInstitutionRepository institutionRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    IUnitOfWork UnitOfWork { get; set; }

    public Institution institution { get; set; }
    private bool showErrorDialog;

    protected override async Task OnInitializedAsync()
    {
        institution = await Task.Run(() => institutionRepository.GetById(Convert.ToInt32(Id)));
    }

    protected async Task DeleteInstitutions()
    {
        try
        {
            await this.UnitOfWork.BeginTransactionAsync();

            await institutionRepository.Delete(institution);

            await this.UnitOfWork.CommitAsync();
            await this.UnitOfWork.CloseTransactionAsync();

            NavigationManager.NavigateTo($"{Country}/Institution/Index");
        }
        catch
        {
            await this.UnitOfWork.RollbackAsync();
            await this.UnitOfWork.CloseTransactionAsync();

            showErrorDialog = true;
            StateHasChanged();
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/Institution/Index");
    }

    private void OnErrorDialogClose(bool accepted)
    {
        if (accepted)
        {
            NavigationManager.NavigateTo($"{Country}/Institution/Index");
        }
        showErrorDialog = false;
        StateHasChanged();
    }

}
