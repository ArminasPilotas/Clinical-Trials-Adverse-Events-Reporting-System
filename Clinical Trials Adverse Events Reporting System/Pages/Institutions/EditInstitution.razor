@page "/{Country}/Institution/Edit/{Id}"


@if (institution is null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="@institution" OnValidSubmit="@UpdateInstitution" @onreset="@Cancel">
    <DataAnnotationsValidator />

    <ValidationSummary />

    <CustomInputText @bind-Value="@institution.Name" Label="Institution Name"> </CustomInputText>

    <CustomInputSelect @bind-value="@InstitutionTypeId" labelName="Institution Type" items="@institutionTypes"></CustomInputSelect>

    <CustomInputText @bind-Value="@institution.Address" Label="Address"></CustomInputText>

    <CustomInputText @bind-Value="@institution.Phone" Label="Phone"></CustomInputText>

    <CustomInputText @bind-Value="@institution.Fax" Label="Fax"></CustomInputText>

    <CustomInputText @bind-Value="@institution.Email" Label="Email"></CustomInputText>

    <CustomInputText @bind-Value="@institution.AlternateAddress" Label="Alternate Address"></CustomInputText>

    <CustomInputText @bind-Value="@institution.AlternatePhone" Label="Alternate Phone"></CustomInputText>

    <CustomInputText @bind-Value="@institution.AlternateFax" Label="Alternate Fax"></CustomInputText>

    <CustomInputText @bind-Value="@institution.AlternateEmail" Label="Alternate Email"></CustomInputText>

    <CustomInputText @bind-Value="@institution.City" Label="City"></CustomInputText>

    <CustomInputText @bind-Value="@institution.RegNo" Label="Registration Number"></CustomInputText>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Modify Reason</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" @bind="institution.ModifyReason" />
        </div>
    </div>


    <ButtonComponent buttonText="Update" buttonType="submit" buttonStyle="primary" onButtonClick="@UpdateInstitution"></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger" onButtonClick="@Cancel"></ButtonComponent>

</EditForm>
    }

@code {
        [Parameter]
        public string Country { get; set; }
        [Parameter]
        public string Id { get; set; }

        [Inject]
        NavigationManager NavigationManager { get; set; }
        [Inject]
        IInstitutionRepository institutionRepository { get; set; }
        [Inject]
        IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
        [Inject]
        ICountryRepository CountryRepository { get; set; }
        [Inject]
        IValidator<Institution> InstitutionValidator { get; set; }

        Institution institution = new Institution();
        List<InstitutionType> institutionTypes;


    public int InstitutionTypeId
    {
        get
        {
            if (institution.InstitutionType != null)
            {
                return institution.InstitutionType.Id;
            }
            return 0;
        }
        set => institution.InstitutionType = institutionTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        institution = await Task.Run(() => institutionRepository.GetById(Convert.ToInt32(Id)));
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        institution.Country = await CountryRepository.GetByName(Country);
    }

    protected async void UpdateInstitution()
    {
        if (InstitutionValidator.Validate(institution))
        {
            await institutionRepository.Update(institution);
            NavigationManager.NavigateTo($"{Country}/Institution/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/Institution/Index");
    }
}
