@page "/{Country}/NationalRequirements/Add"

<EditForm Model="@nationalRequirement" OnValidSubmit="CreateNationalRequirement" @onreset="@Cancel">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <InputComponent inputName="@Country" labelName="Country" readOnly="true"></InputComponent>

    <CustomInputSelect @bind-value="@ReportingTypeId" items="@reportingTypes" labelName="Reporting Type"></CustomInputSelect>

    <CustomInputSelect @bind-value="@InstitutionTypeId" items="@institutionTypes" labelName="Institution for Reporting"></CustomInputSelect>

    <CustomInputSelect @bind-value="@SusarTypeId" items="@susarTypes" labelName="Susar Type"></CustomInputSelect>

    <CustomInputSelect @bind-value="@CaseOriginId" items="@caseOrigins" labelName="Case Origins"></CustomInputSelect>

    <CustomInputSelect @bind-value="@IpTypeId" items="@investigationalProductTypes" labelName="Investigational Product Types"></CustomInputSelect>

    <CustomInputSelect @bind-value="@ReportTypeId" items="@reportTypes" labelName="Type of report"></CustomInputSelect>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Days</label>
        <div class="col-sm-10">
            <input type="text" class="form-control" @bind="nationalRequirement.Days" />
        </div>
    </div>

    <CustomInputText @bind-Value="@nationalRequirement.Comments" Label="Comments"></CustomInputText>

    <ButtonComponent buttonText="Create" buttonType="submit" buttonStyle="primary"></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger"></ButtonComponent>

    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
    [Parameter]
    public string Country { get; set; }
    [Inject]
    INationalRequirementsRepository nationalRequirementsRepository { get; set; }
    [Inject]
    INationalRequirementVersionRepository nationalRequirementVersionRepository { get; set; }
    [Inject]
    ICountryRepository countryRepository { get; set; }
    [Inject]
    ICountryRequirementVersionRepository countryRequirementVersionRepository { get; set; }
    [Inject]
    IClassifierRepository<ReportingType> reportingTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<InstitutionType> institutionTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<SusarType> susarTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<CaseOrigin> caseOriginRepository { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
    [Inject]
    IClassifierRepository<ReportType> reportTypeRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }

    List<ReportingType> reportingTypes;
    List<InstitutionType> institutionTypes;
    List<SusarType> susarTypes;
    List<CaseOrigin> caseOrigins;
    List<InvestigationalProductType> investigationalProductTypes;
    List<ReportType> reportTypes;

    NationalRequirement nationalRequirement = new NationalRequirement();

    public int ReportingTypeId {
        get
        {
            if(nationalRequirement.ReportingType != null)
            {
                return nationalRequirement.ReportingType.Id;
            }
            return 0;
        }
        set => nationalRequirement.ReportingType = reportingTypes.Single(c => c.Id == value);
    }
    public int InstitutionTypeId {
        get
        {
            if (nationalRequirement.InstitutionType != null)
            {
                return nationalRequirement.InstitutionType.Id;
            }
            return 0;
        }
        set => nationalRequirement.InstitutionType = institutionTypes.Single(c => c.Id == value);
    }
    public int SusarTypeId {
        get
        {
            if (nationalRequirement.SusarType != null)
            {
                return nationalRequirement.SusarType.Id;
            }
            return 0;
        }
        set => nationalRequirement.SusarType = susarTypes.Single(c => c.Id == value);
    }
    public int CaseOriginId {
        get
        {
            if (nationalRequirement.CaseOrigin != null)
            {
                return nationalRequirement.CaseOrigin.Id;
            }
            return 0;
        }
        set => nationalRequirement.CaseOrigin = caseOrigins.Single(c => c.Id == value);
    }
    public int IpTypeId
    {
        get
        {
            if (nationalRequirement.InvestigationalProductType != null)
            {
                return nationalRequirement.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => nationalRequirement.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }
    public int ReportTypeId {
        get
        {
            if (nationalRequirement.ReportType != null)
            {
                return nationalRequirement.ReportType.Id;
            }
            return 0;
        }
        set => nationalRequirement.ReportType = reportTypes.Single(c => c.Id == value); }

    protected override async Task OnInitializedAsync()
    {
        reportingTypes = await Task.Run(() => reportingTypeRepository.GetAll());
        institutionTypes = await Task.Run(() => institutionTypeRepository.GetAll());
        susarTypes = await Task.Run(() => susarTypeRepository.GetAll());
        caseOrigins = await Task.Run(() => caseOriginRepository.GetAll());
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        reportTypes = await Task.Run(() => reportTypeRepository.GetAll());
        nationalRequirement.Country = await countryRepository.GetByName(Country);
    }

    protected async void CreateNationalRequirement()
    {
        await nationalRequirementsRepository.Create(nationalRequirement);
        await CreateNationalRequirementVersion();

        NavigationManager.NavigateTo($"{Country}/NationalRequirements/Index");
    }

    protected async Task CreateNationalRequirementVersion()
    {
        NationalRequirementVersion nationalRequirementVersion = new NationalRequirementVersion();
        List<CountryRequirementVersion> countryRequirementVersions = await countryRequirementVersionRepository.GetByCountry(Country);
        nationalRequirementVersion.CountryRequirementVersion = countryRequirementVersions.Where(e => e.InvestigationalProductType.Id == IpTypeId).OrderByDescending(e => e.DateOfRenewal).FirstOrDefault();
        nationalRequirementVersion.NationalRequirement = nationalRequirement;
        await nationalRequirementVersionRepository.Create(nationalRequirementVersion);
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/NationalRequirements/Index");
    }

}
