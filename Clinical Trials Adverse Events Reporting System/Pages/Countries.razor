@page "/Countries/Index"

@inject CountryRepository countryRepository

@if (countries is null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="input-group">
        <div class="form-outline">
            <label class="form-label" for="search">Search</label>
            <input type="search" autocomplete="off" id="search" class="form-control" @oninput="SearchTextChanged" />
        </div>
    </div>
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">Country</th>
                <th scope="col">Abbrevation</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var country in countriesFilter)
            {
                <tr>
                    <td>@country.Name</td>
                    <td>@country.Abbreviation</td>
                    <td>
                        <a class="nav-link" href="@country.Name/Institution/Index">
                            <span class="oi oi-list" aria-hidden="true">View Institutions</span>
                        </a>

                        <a class="nav-link" href="@country.Name/Authorities/Index">
                            <span class="oi oi-list" aria-hidden="true">Manage Authorities</span>
                        </a>

                        <a class="nav-link" href="@country.Name/NationalRequirements/Index">
                            <span class="oi oi-list" aria-hidden="true">View Requirements</span>
                        </a>

                        <a class="nav-link" href="@country.Name/CountryRequirementsVersion/Index">
                            <span class="oi oi-list" aria-hidden="true">Requirements Version</span>
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <PaginationComponent CurrentPage="@CurrentPage" TotalPagesNumber="@((countries.Count + RecordsPerPage-1)/RecordsPerPage)" PageChanged="@OnPageChanged"></PaginationComponent>

}


@code {

    public List<Country> countries { get; set; }
    public List<Country> countriesFilter { get; set; }

    public int RecordsPerPage { get; set; }
    public int CurrentPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        countries = await Task.Run(() => countryRepository.GetAll());
        CurrentPage = 1;
        RecordsPerPage = 20;
        OnPageChanged(CurrentPage);
    }

    private void SearchTextChanged(ChangeEventArgs args) 
    {
        string value = (string)args.Value;

        if (string.IsNullOrEmpty(value))
        {
            countriesFilter = countries;
        }
        else
        {
            countriesFilter = countries.Where(e => e.Name.ToLower().Contains(value.ToLower())).ToList();
        }
    }

    private void OnPageChanged(int pressedPageNumber)
    {
        CurrentPage = pressedPageNumber;
        int indexFrom = (CurrentPage - 1) * RecordsPerPage;
        countriesFilter = countries.Skip(indexFrom).Take(RecordsPerPage).ToList();
        StateHasChanged();
    }
}
