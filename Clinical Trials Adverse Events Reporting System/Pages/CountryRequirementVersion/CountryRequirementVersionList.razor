@page "/{Country}/CountryRequirementsVersion/Index"

@using Clinical_Trials_Adverse_Events_Reporting_System.Entities
@using Clinical_Trials_Adverse_Events_Reporting_System.Data

<NavLink class="nav-link">
    <a href="/@Country/CountryRequirementsVersion/Add">
        <span class="oi oi-plus" aria-hidden="true">Add National Requirement</span>
    </a>
</NavLink>

@if (countryRequirementVersions is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">IP Type</th>
                <th scope="col">Date of reneval</th>
                <th scope="col">Requirement Version</th>
                <th scope="col">Contact revision date</th>
                <th scope="col">Contact Version</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var countryRequirementVersion in countryRequirementVersions)
            {
                <tr>
                    <td>@countryRequirementVersion.InvestigationalProductType.Name</td>
                    <td>@countryRequirementVersion.DateOfRenewal.ToShortDateString()</td>
                    <td>@countryRequirementVersion.RequirementVersion</td>
                    <td>@countryRequirementVersion.ContactRevisionDate.ToShortDateString()</td>
                    <td>@countryRequirementVersion.ContactVersion</td>

                    <td>
                        @if (!nationalRequirementVersions.Where(c => c.CountryRequirementVersion == countryRequirementVersion).Any())
                        {
                            <button class="nav-link" style="background:transparent; border:none;" @onclick="@(() => DeleteCountryRequirementVersion(countryRequirementVersion))">
                                <span class="oi oi-eye" aria-hidden="true"> Delete</span>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Country { get; set; }

    [Inject]
    CountryRequirementVersionRepository countryRequirementVersionRepository { get; set; }
    [Inject]
    NationalRequirementVersionRepository NationalRequirementVersionRepository { get; set; }

    List<CountryRequirementVersion> countryRequirementVersions;
    List<NationalRequirementVersion> nationalRequirementVersions;

    protected override async Task OnInitializedAsync()
    {
        countryRequirementVersions = await Task.Run(() => countryRequirementVersionRepository.GetByCountry(Country));
        nationalRequirementVersions = await Task.Run(() => NationalRequirementVersionRepository.GetAll());
    }

    private async void DeleteCountryRequirementVersion(CountryRequirementVersion countryRequirementVersion)
    {
        await countryRequirementVersionRepository.Delete(countryRequirementVersion);
        countryRequirementVersions.Remove(countryRequirementVersion);
        StateHasChanged();
    }


}
