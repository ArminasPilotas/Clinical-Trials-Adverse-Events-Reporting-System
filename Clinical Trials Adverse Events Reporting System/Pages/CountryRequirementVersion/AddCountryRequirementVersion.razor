@page "/{Country}/CountryRequirementsVersion/Add"


<EditForm Model="@countryRequirementVersion" OnValidSubmit="@CreateCountryRequirementVersion" @onreset="@Cancel">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <InputComponent @bind-inputName="@Country" labelName="Country" readOnly="true"></InputComponent>

    <CustomInputSelect @bind-value="IPTypeId" items="@investigationalProductTypes" labelName="Investigational Product Type"></CustomInputSelect>

    <CustomInputText @bind-Value="@countryRequirementVersion.RequirementVersion" Label="Requirement Version"></CustomInputText>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Date Of Renewal</label>
        <div class="col-sm-10">
            <SfDatePicker TValue="DateTime" @bind-Value="@countryRequirementVersion.DateOfRenewal" Max="DateTime.Now" Min="DateTime.Now.AddYears(-20)" Placeholder="Select a date" AllowEdit="false" >
                <DatePickerEvents TValue="DateTime" ValueChange="@RenewalValueChanged"></DatePickerEvents>
            </SfDatePicker>
        </div>
    </div>

    <CustomInputText @bind-Value="@countryRequirementVersion.ContactVersion" Label="Contact Version"></CustomInputText>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Contact Revision Date</label>
        <div class="col-sm-10">
            <SfDatePicker TValue="DateTime" @bind-Value="@countryRequirementVersion.ContactRevisionDate" Max="DateTime.Now" Min="DateTime.Now.AddYears(-20)" Placeholder="Select a date" AllowEdit="false">
                <DatePickerEvents TValue="DateTime" ValueChange="@ContactRevisionValueChanged"></DatePickerEvents>
            </SfDatePicker>
        </div>
    </div>

    <ButtonComponent buttonText="Create" buttonType="submit" buttonStyle="primary"></ButtonComponent>

    <ButtonComponent buttonText="Cancel" buttonType="reset" buttonStyle="danger"></ButtonComponent>

    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
        [Parameter]
        public string Country { get; set; }
        [Inject]
        CountryRepository countryRepository { get; set; }
        [Inject]
        IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
        [Inject]
        CountryRequirementVersionRepository countryRequirementVersionRepository { get; set; }
        [Inject]
        NavigationManager NavigationManager { get; set; }
        [Inject]
        IValidator<CountryRequirementVersion> CountryRequirementVersionValidator { get; set; }

        List<InvestigationalProductType> investigationalProductTypes;

    public CountryRequirementVersion countryRequirementVersion = new CountryRequirementVersion();

    public int IPTypeId {
        get
        {
            if(countryRequirementVersion.InvestigationalProductType != null)
            {
                return countryRequirementVersion.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => countryRequirementVersion.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        countryRequirementVersion.Country = await countryRepository.GetByName(Country);
        countryRequirementVersion.DateOfRenewal = DateTime.Now;
        countryRequirementVersion.ContactRevisionDate = DateTime.Now;
    }

    protected async void CreateCountryRequirementVersion()
    {
        if (CountryRequirementVersionValidator.Validate(countryRequirementVersion))
        {
            await countryRequirementVersionRepository.Create(countryRequirementVersion);
            NavigationManager.NavigateTo($"{Country}/CountryRequirementsVersion/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/CountryRequirementsVersion/Index");
    }

    private void RenewalValueChanged(ChangedEventArgs<DateTime> args)
    {
        countryRequirementVersion.DateOfRenewal = args.Value;
    }

    private void ContactRevisionValueChanged(ChangedEventArgs<DateTime> args)
    {
        countryRequirementVersion.ContactRevisionDate = args.Value;
    }
}
