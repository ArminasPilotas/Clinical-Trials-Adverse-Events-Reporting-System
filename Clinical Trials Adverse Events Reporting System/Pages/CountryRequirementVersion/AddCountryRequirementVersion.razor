@page "/{Country}/CountryRequirementsVersion/Add"

@attribute [Authorize(Policy = "SystemAuthorization", Roles = "Reporter")]

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnSubmit="@CreateCountryRequirementVersion" @onreset="@Cancel">

        <DataAnnotationsValidator />

        <ValidationSummary />
        <CustomValidationBase @ref="customValidationBase" />

        <InputComponent @bind-inputName="@Country" labelName="Country" readOnly="true"></InputComponent>

        <CustomInputSelect @bind-value="IPTypeId" items="@investigationalProductTypes" labelName="Investigational Product Type"></CustomInputSelect>

        <CustomInputText @bind-Value="@countryRequirementVersion.RequirementVersion" Label="Requirement Version"></CustomInputText>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Date Of Renewal</label>
            <div class="col-sm-10">
                <SfDatePicker TValue="DateTime" @bind-Value="@countryRequirementVersion.DateOfRenewal" Max="DateTime.Now" Min="DateTime.Now.AddYears(-20)" Placeholder="Select a date" AllowEdit="false">
                    <DatePickerEvents TValue="DateTime" ValueChange="@RenewalValueChanged"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>

        <CustomInputText @bind-Value="@countryRequirementVersion.ContactVersion" Label="Contact Version"></CustomInputText>

        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Contact Revision Date</label>
            <div class="col-sm-10">
                <SfDatePicker TValue="DateTime" @bind-Value="@countryRequirementVersion.ContactRevisionDate" Max="DateTime.Now" Min="DateTime.Now.AddYears(-20)" Placeholder="Select a date" AllowEdit="false">
                    <DatePickerEvents TValue="DateTime" ValueChange="@ContactRevisionValueChanged"></DatePickerEvents>
                </SfDatePicker>
            </div>
        </div>

        <div id="container">
            <button id="button1" class="btn btn-primary" type="submit">Create</button>
            <button id="button2" class="btn btn-danger" type="reset">Cancel</button>
        </div>

    </EditForm>
}

@code {
    [Parameter]
    public string Country { get; set; }
    [Inject]
    ICountryRepository countryRepository { get; set; }
    [Inject]
    IClassifierRepository<InvestigationalProductType> IPTypeRepository { get; set; }
    [Inject]
    ICountryRequirementVersionRepository countryRequirementVersionRepository { get; set; }
    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    IValidator<CountryRequirementVersion> CountryRequirementVersionValidator { get; set; }

    private CustomValidationBase customValidationBase;
    private EditContext editContext;

    List<InvestigationalProductType> investigationalProductTypes;

    public CountryRequirementVersion countryRequirementVersion;

    public int IPTypeId
    {
        get
        {
            if (countryRequirementVersion.InvestigationalProductType != null)
            {
                return countryRequirementVersion.InvestigationalProductType.Id;
            }
            return 0;
        }
        set => countryRequirementVersion.InvestigationalProductType = investigationalProductTypes.Single(c => c.Id == value);
    }

    protected override async Task OnInitializedAsync()
    {
        investigationalProductTypes = await Task.Run(() => IPTypeRepository.GetAll());
        countryRequirementVersion = new CountryRequirementVersion();
        countryRequirementVersion.Country = await countryRepository.GetByName(Country);
        editContext = new EditContext(countryRequirementVersion);
    }

    protected async void CreateCountryRequirementVersion()
    {
        customValidationBase.ClearErrors();

        var errors = new Dictionary<string, List<string>>();

        if (!CountryRequirementVersionValidator.Validate(countryRequirementVersion))
        {
            errors.Add(nameof(countryRequirementVersion.InvestigationalProductType),
                new List<string>() { "Investigational Product Type field must be unique" });

            errors.Add(nameof(countryRequirementVersion.ContactVersion),
                new List<string>() { "Contact version field must be unique" });

            errors.Add(nameof(countryRequirementVersion.RequirementVersion),
                new List<string>() { "Requirement version field must be unique" });
        }
        if (errors.Any() || !editContext.Validate())
        {
            customValidationBase.DisplayErrors(errors);
            StateHasChanged();
        }
        else
        {
            await countryRequirementVersionRepository.Create(countryRequirementVersion);
            NavigationManager.NavigateTo($"{Country}/CountryRequirementsVersion/Index");
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo($"{Country}/CountryRequirementsVersion/Index");
    }

    private void RenewalValueChanged(ChangedEventArgs<DateTime> args)
    {
        countryRequirementVersion.DateOfRenewal = args.Value;
    }

    private void ContactRevisionValueChanged(ChangedEventArgs<DateTime> args)
    {
        countryRequirementVersion.ContactRevisionDate = args.Value;
    }
}
