@typeparam TItem

@using System.Collections.Generic
@using System.Reflection 
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities

<NavLink class="nav-link">
    <a class="nav-link" href="@ClassifierName/Create">
        <span class="oi oi-plus" aria-hidden="true">Add New</span>
    </a>
</NavLink>

<h3>Classifiers List</h3>
<hr />

@if (Classifiers is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Author</th>
                <th scope="col">Editor</th>
                <th scope="col">Created At</th>
                <th scope="col">Modified At</th>
                <th scope="col">Modify Reason</th>
                <td scope="col"></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var classifier in Classifiers)
            {
            <tr>
                <td>@ItemValue(classifier, "Id")</td>
                <td>@ItemValue(classifier, "Name")</td>
                <td>@ItemValue(classifier, "Author")</td>
                <td>@ItemValue(classifier, "Editor")</td>
                <td>@ItemValue(classifier, "Created")</td>
                <td>@ItemValue(classifier, "Modified")</td>
                <td>@ItemValue(classifier, "ModifyReason")</td>

                <td>
                    <a class="nav-link" href="@ClassifierName/Edit/@ItemValue(classifier,"Id")">
                        <span class="oi oi-pencil" aria-hidden="true">Edit</span>
                    </a>
                    <a class="nav-link" href="@ClassifierName/Delete/@ItemValue(classifier,"Id")">
                        <span class="oi oi-trash" aria-hidden="true">Delete</span>
                    </a>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public List<TItem> Classifiers { get; set; }
    [Parameter]
    public string ClassifierName { get; set; }


    private string ItemValue(TItem Item, string propertyName)
    {
        Type type = Item.GetType();
        PropertyInfo pInfo = type.GetProperty(propertyName);

        if (pInfo == null) return string.Empty;

        if (pInfo.GetValue(Item, null) is null) return string.Empty;

        return pInfo.GetValue(Item, null).ToString();
    }



}
