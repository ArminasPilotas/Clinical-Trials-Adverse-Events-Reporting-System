@typeparam TItem

@using System.Collections.Generic
@using System.Reflection
@using Clinical_Trials_Adverse_Events_Reporting_System.Entities

@if (Action != "Delete")
{
    <form>
        <div class="form-group row">
            <label class="col-sm-2 col-form-label">Name</label>
            <div class="col-sm-10">
                <input @oninput="OnNameChanged" type="text" class="form-control" value="@Name" />
            </div>
        </div>

        @if (Action == "Edit")
        {
            <div class="form-group row">
                <label class="col-sm-2 col-form-label">Modify Reason</label>
                <div class="col-sm-10">
                    <input @oninput="OnModifyReasonChanged" type="text" class="form-control" value="@ModifyReason" />
                </div>
            </div>
        }
        <label></label>

        @if (Action == "Edit")
        {
            <div class="col-md-12 text-center">
                <button type="button" class="btn btn-primary btn-lg btn-block" @onclick="OnEditClick" >Update</button>
            </div>
        }
        @if (Action == "Create")
        {
            <div class="col-md-12 text-center">
                <button type="button" class="btn btn-primary btn-lg btn-block" @onclick="OnCreateClick">Create</button>
            </div>
        }

        <div class="col-md-12 text-center">
            <button type="button" class="btn btn-danger btn-lg btn-block" @onclick="OnDeleteClick">Cancel</button>
        </div>

    </form>
}
    @code {
        [Parameter]
        public TItem Classifier { get; set; }
        [Parameter]
        public string Action { get; set; }
        [Parameter]
        public string Id { get; set; }
        [Parameter]
        public string Name { get; set; }
        [Parameter]
        public string ModifyReason { get; set; }
        [Parameter]
        public EventCallback OnEditClick { get; set; }
        [Parameter]
        public EventCallback OnCreateClick { get; set; }
        [Parameter]
        public EventCallback OnDeleteClick { get; set; }
        [Parameter]
        public EventCallback<string> NameChanged { get; set; }
        [Parameter]
        public EventCallback<string> ModifyReasonChanged { get; set; }

        private async Task OnNameChanged(ChangeEventArgs e)
        {
            Name = e.Value.ToString();

            await NameChanged.InvokeAsync(Name);
        }

        private async Task OnModifyReasonChanged(ChangeEventArgs e)
        {
            ModifyReason = e.Value.ToString();

            await ModifyReasonChanged.InvokeAsync(ModifyReason);
        }

    }
